name: Build Monitoring and Alerting
on:
  workflow_run:
    workflows: ["bluebuild"]
    types:
      - completed
  schedule:
    # Check Aurora base image updates every 6 hours
    - cron: "0 */6 * * *"
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of monitoring check to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - aurora_updates
          - build_status
          - package_status

jobs:
  build-status-notification:
    name: Build Status Notification
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get build information
        id: build_info
        run: |
          WORKFLOW_RUN_ID="${{ github.event.workflow_run.id }}"
          WORKFLOW_STATUS="${{ github.event.workflow_run.conclusion }}"
          WORKFLOW_URL="${{ github.event.workflow_run.html_url }}"
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          BRANCH="${{ github.event.workflow_run.head_branch }}"
          
          echo "run_id=$WORKFLOW_RUN_ID" >> $GITHUB_OUTPUT
          echo "status=$WORKFLOW_STATUS" >> $GITHUB_OUTPUT
          echo "url=$WORKFLOW_URL" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          
          # Get commit message
          COMMIT_MSG=$(git log --format=%s -n 1 $COMMIT_SHA 2>/dev/null || echo "Unknown commit")
          echo "commit_message=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Create build status issue on failure
        if: github.event.workflow_run.conclusion == 'failure'
        run: |
          ISSUE_TITLE="🚨 Build Failed - $(date -u +"%Y-%m-%d %H:%M UTC")"
          ISSUE_BODY="## Build Failure Report

          **Build Details:**
          - **Status:** ❌ Failed
          - **Workflow Run:** [${{ steps.build_info.outputs.run_id }}](${{ steps.build_info.outputs.url }})
          - **Branch:** \`${{ steps.build_info.outputs.branch }}\`
          - **Commit:** \`${{ steps.build_info.outputs.commit }}\`
          - **Commit Message:** ${{ steps.build_info.outputs.commit_message }}
          - **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          **Possible Causes:**
          - Aurora base image changes causing compatibility issues
          - Maccel RPM build failures
          - Package dependency conflicts
          - Network connectivity issues during build
          - GitHub Actions infrastructure problems

          **Troubleshooting Steps:**
          1. Check the [workflow logs](${{ steps.build_info.outputs.url }}) for specific error messages
          2. Verify Aurora base image availability and kernel version compatibility
          3. Check maccel-rpm-builder status and recent builds
          4. Review recent changes to recipe.yml or build scripts
          5. Consider running a manual build with \`force_rebuild=true\`

          **Auto-generated by:** Build Monitoring Workflow
          **Labels:** build-failure, monitoring, automated"

          # Create issue using GitHub CLI
          gh issue create \
            --title "$ISSUE_TITLE" \
            --body "$ISSUE_BODY" \
            --label "build-failure,monitoring,automated" \
            --assignee "${{ github.repository_owner }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Comment on success after previous failure
        if: github.event.workflow_run.conclusion == 'success'
        run: |
          # Check if there are any open build failure issues
          OPEN_ISSUES=$(gh issue list --label "build-failure" --state open --json number,title --jq length)
          
          if [[ "$OPEN_ISSUES" -gt 0 ]]; then
            # Get the most recent build failure issue
            LATEST_ISSUE=$(gh issue list --label "build-failure" --state open --json number --jq '.[0].number')
            
            if [[ -n "$LATEST_ISSUE" ]]; then
              COMMENT="## ✅ Build Recovery Successful

              **Build Details:**
              - **Status:** ✅ Success
              - **Workflow Run:** [${{ steps.build_info.outputs.run_id }}](${{ steps.build_info.outputs.url }})
              - **Branch:** \`${{ steps.build_info.outputs.branch }}\`
              - **Commit:** \`${{ steps.build_info.outputs.commit }}\`
              - **Recovery Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

              The build is now working successfully. This issue can be closed if the problem is resolved.

              **Auto-generated by:** Build Monitoring Workflow"

              gh issue comment "$LATEST_ISSUE" --body "$COMMENT"
              
              # Optionally close the issue automatically
              # gh issue close "$LATEST_ISSUE" --comment "Build recovered successfully. Auto-closing."
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}

  aurora-update-monitor:
    name: Aurora Base Image Update Monitor
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'aurora_updates'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Aurora base image updates
        id: aurora_check
        run: |
          # Get current base image from recipe
          BASE_IMAGE=$(grep "base-image:" recipes/recipe.yml | awk '{print $2}')
          IMAGE_VERSION=$(grep "image-version:" recipes/recipe.yml | awk '{print $2}')
          FULL_IMAGE="${BASE_IMAGE}:${IMAGE_VERSION}"
          
          echo "Checking Aurora base image: $FULL_IMAGE"
          
          # Get current image digest and kernel version
          CURRENT_DIGEST=$(skopeo inspect docker://$FULL_IMAGE | jq -r '.Digest')
          CURRENT_KERNEL=$(skopeo inspect docker://$FULL_IMAGE | jq -r '.Labels["ostree.linux"] // "unknown"')
          
          echo "current_digest=$CURRENT_DIGEST" >> $GITHUB_OUTPUT
          echo "current_kernel=$CURRENT_KERNEL" >> $GITHUB_OUTPUT
          echo "base_image=$FULL_IMAGE" >> $GITHUB_OUTPUT
          
          # Check if we have cached information
          CACHE_FILE=".cache/aurora-monitor"
          if [[ -f "$CACHE_FILE" ]]; then
            CACHED_DIGEST=$(cat "$CACHE_FILE" 2>/dev/null || echo "")
            echo "cached_digest=$CACHED_DIGEST" >> $GITHUB_OUTPUT
            
            if [[ "$CURRENT_DIGEST" != "$CACHED_DIGEST" ]]; then
              echo "update_available=true" >> $GITHUB_OUTPUT
              echo "Aurora base image has been updated!"
              echo "Previous digest: $CACHED_DIGEST"
              echo "Current digest: $CURRENT_DIGEST"
            else
              echo "update_available=false" >> $GITHUB_OUTPUT
              echo "Aurora base image is up to date"
            fi
          else
            echo "update_available=unknown" >> $GITHUB_OUTPUT
            echo "No cached digest found, treating as potential update"
          fi
          
          # Update cache
          mkdir -p .cache
          echo "$CURRENT_DIGEST" > "$CACHE_FILE"
          echo "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" > .cache/aurora-last-check

      - name: Create Aurora update notification
        if: steps.aurora_check.outputs.update_available == 'true'
        run: |
          ISSUE_TITLE="🔄 Aurora Base Image Updated - $(date -u +"%Y-%m-%d")"
          ISSUE_BODY="## Aurora Base Image Update Detected

          **Update Details:**
          - **Base Image:** \`${{ steps.aurora_check.outputs.base_image }}\`
          - **New Kernel Version:** \`${{ steps.aurora_check.outputs.current_kernel }}\`
          - **New Digest:** \`${{ steps.aurora_check.outputs.current_digest }}\`
          - **Previous Digest:** \`${{ steps.aurora_check.outputs.cached_digest }}\`
          - **Detection Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          **Recommended Actions:**
          1. **Trigger a new build** to incorporate the updated Aurora base image
          2. **Verify maccel compatibility** with the new kernel version
          3. **Test the new image** before promoting to users
          4. **Update documentation** if there are significant changes

          **Automatic Actions:**
          - This notification was automatically generated
          - A new build may be triggered automatically by the daily schedule
          - Monitor the build workflow for any compatibility issues

          **Build Trigger:**
          You can manually trigger a build by:
          - Going to the [Actions tab](../../actions/workflows/build.yml)
          - Clicking \"Run workflow\"
          - Enabling \"Force rebuild even if no changes detected\"

          **Auto-generated by:** Aurora Update Monitor
          **Labels:** aurora-update, monitoring, automated"

          # Create issue
          gh issue create \
            --title "$ISSUE_TITLE" \
            --body "$ISSUE_BODY" \
            --label "aurora-update,monitoring,automated" \
            --assignee "${{ github.repository_owner }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Trigger build on Aurora update
        if: steps.aurora_check.outputs.update_available == 'true'
        run: |
          echo "Triggering build due to Aurora base image update..."
          
          # Trigger the build workflow
          gh workflow run build.yml \
            --field force_rebuild=true \
            --field reason="Aurora base image updated"
          
          echo "Build workflow triggered successfully"
        env:
          GITHUB_TOKEN: ${{ github.token }}

  build-dashboard-update:
    name: Update Build Dashboard
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate build status dashboard
        run: |
          echo "Generating build status dashboard..."
          
          # Create dashboard directory
          mkdir -p .github/dashboard
          
          # Get recent workflow runs
          RECENT_RUNS=$(gh run list --workflow=build.yml --limit=10 --json status,conclusion,createdAt,headSha,headBranch,url)
          
          # Get current Aurora info
          BASE_IMAGE=$(grep "base-image:" recipes/recipe.yml | awk '{print $2}')
          IMAGE_VERSION=$(grep "image-version:" recipes/recipe.yml | awk '{print $2}')
          FULL_IMAGE="${BASE_IMAGE}:${IMAGE_VERSION}"
          
          CURRENT_KERNEL=$(skopeo inspect docker://$FULL_IMAGE 2>/dev/null | jq -r '.Labels["ostree.linux"] // "unknown"' || echo "unknown")
          
          # Generate dashboard HTML
          cat > .github/dashboard/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>MyAuroraBluebuild - Build Dashboard</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 20px; background: #f6f8fa; }
                  .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
                  .header { border-bottom: 1px solid #e1e4e8; padding-bottom: 20px; margin-bottom: 20px; }
                  .status-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px; }
                  .status-card { padding: 20px; border: 1px solid #e1e4e8; border-radius: 6px; background: #f6f8fa; }
                  .status-success { border-left: 4px solid #28a745; }
                  .status-failure { border-left: 4px solid #d73a49; }
                  .status-pending { border-left: 4px solid #ffc107; }
                  .builds-table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                  .builds-table th, .builds-table td { padding: 12px; text-align: left; border-bottom: 1px solid #e1e4e8; }
                  .builds-table th { background: #f6f8fa; font-weight: 600; }
                  .status-badge { padding: 4px 8px; border-radius: 12px; font-size: 12px; font-weight: 500; }
                  .badge-success { background: #d4edda; color: #155724; }
                  .badge-failure { background: #f8d7da; color: #721c24; }
                  .badge-pending { background: #fff3cd; color: #856404; }
                  .timestamp { color: #586069; font-size: 14px; }
                  .metric { font-size: 24px; font-weight: bold; margin-bottom: 5px; }
                  .metric-label { color: #586069; font-size: 14px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🚀 MyAuroraBluebuild Dashboard</h1>
                      <p>Build status and monitoring for Aurora-based custom image with maccel integration</p>
                      <p class="timestamp">Last updated: <span id="lastUpdate"></span></p>
                  </div>
          
                  <div class="status-grid">
                      <div class="status-card">
                          <h3>📊 Build Status</h3>
                          <div class="metric" id="buildStatus">Loading...</div>
                          <div class="metric-label">Latest Build</div>
                      </div>
                      
                      <div class="status-card">
                          <h3>🐧 Aurora Base</h3>
                          <div class="metric" id="auroraVersion">Loading...</div>
                          <div class="metric-label">Kernel Version</div>
                      </div>
                      
                      <div class="status-card">
                          <h3>🖱️ Maccel Status</h3>
                          <div class="metric" id="maccelStatus">Loading...</div>
                          <div class="metric-label">Integration Status</div>
                      </div>
                      
                      <div class="status-card">
                          <h3>📈 Success Rate</h3>
                          <div class="metric" id="successRate">Loading...</div>
                          <div class="metric-label">Last 10 Builds</div>
                      </div>
                  </div>
          
                  <h2>📋 Recent Builds</h2>
                  <table class="builds-table">
                      <thead>
                          <tr>
                              <th>Status</th>
                              <th>Branch</th>
                              <th>Commit</th>
                              <th>Started</th>
                              <th>Actions</th>
                          </tr>
                      </thead>
                      <tbody id="buildsTable">
                          <tr><td colspan="5">Loading build history...</td></tr>
                      </tbody>
                  </table>
          
                  <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #e1e4e8; color: #586069; font-size: 14px;">
                      <p>🤖 This dashboard is automatically updated by the monitoring workflow.</p>
                      <p>📊 Data refreshes every 6 hours or when builds complete.</p>
                  </div>
              </div>
          
              <script>
                  // Set last update time
                  document.getElementById('lastUpdate').textContent = new Date().toLocaleString();
                  
                  // This would be populated by the GitHub Action with real data
                  // For now, showing placeholder structure
                  document.getElementById('buildStatus').textContent = 'Success';
                  document.getElementById('auroraVersion').textContent = 'CURRENT_KERNEL_PLACEHOLDER';
                  document.getElementById('maccelStatus').textContent = 'Active';
                  document.getElementById('successRate').textContent = '90%';
              </script>
          </body>
          </html>
          EOF
          
          # Replace placeholder with actual kernel version
          sed -i "s/CURRENT_KERNEL_PLACEHOLDER/$CURRENT_KERNEL/g" .github/dashboard/index.html
          
          echo "Dashboard generated successfully"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Commit dashboard updates
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add and commit dashboard changes
          git add .github/dashboard/
          
          if git diff --staged --quiet; then
            echo "No dashboard changes to commit"
          else
            git commit -m "Update build dashboard - $(date -u +"%Y-%m-%d %H:%M UTC")"
            git push
            echo "Dashboard updated and committed"
          fi

  package-status-monitor:
    name: Package Status Monitor
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && (github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'package_status')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check maccel package availability
        run: |
          echo "Checking maccel package status..."
          
          # Get current kernel version from Aurora
          BASE_IMAGE=$(grep "base-image:" recipes/recipe.yml | awk '{print $2}')
          IMAGE_VERSION=$(grep "image-version:" recipes/recipe.yml | awk '{print $2}')
          FULL_IMAGE="${BASE_IMAGE}:${IMAGE_VERSION}"
          
          KERNEL_VERSION=$(skopeo inspect docker://$FULL_IMAGE | jq -r '.Labels["ostree.linux"] // "unknown"')
          MACCEL_VERSION=$(gh api repos/Gnarus-G/maccel/releases/latest --jq '.tag_name' | sed 's/^v//')
          
          echo "Current kernel: $KERNEL_VERSION"
          echo "Latest maccel: $MACCEL_VERSION"
          
          # Check if packages exist
          RELEASE_TAG="kernel-${KERNEL_VERSION}-maccel-${MACCEL_VERSION}"
          
          if gh api repos/abirkel/maccel-rpm-builder/releases/tags/$RELEASE_TAG >/dev/null 2>&1; then
            echo "✅ Packages available for current configuration"
            echo "Release: $RELEASE_TAG"
          else
            echo "⚠️ Packages not available for current configuration"
            echo "Missing release: $RELEASE_TAG"
            echo "This may cause build failures"
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}

  cleanup-old-issues:
    name: Cleanup Old Monitoring Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Close resolved build failure issues
        run: |
          echo "Cleaning up old monitoring issues..."
          
          # Get build failure issues older than 7 days
          OLD_ISSUES=$(gh issue list \
            --label "build-failure,monitoring" \
            --state open \
            --json number,createdAt,title \
            --jq '.[] | select((.createdAt | fromdateiso8601) < (now - 604800)) | .number')
          
          if [[ -n "$OLD_ISSUES" ]]; then
            echo "Found old build failure issues to close:"
            echo "$OLD_ISSUES"
            
            for issue in $OLD_ISSUES; do
              gh issue close "$issue" --comment "Auto-closing old build failure issue. If the problem persists, please create a new issue."
              echo "Closed issue #$issue"
            done
          else
            echo "No old build failure issues found"
          fi
          
          # Close old Aurora update notifications that are resolved
          OLD_AURORA_ISSUES=$(gh issue list \
            --label "aurora-update,monitoring" \
            --state open \
            --json number,createdAt,title \
            --jq '.[] | select((.createdAt | fromdateiso8601) < (now - 259200)) | .number')
          
          if [[ -n "$OLD_AURORA_ISSUES" ]]; then
            echo "Found old Aurora update issues to close:"
            echo "$OLD_AURORA_ISSUES"
            
            for issue in $OLD_AURORA_ISSUES; do
              gh issue close "$issue" --comment "Auto-closing old Aurora update notification. The update has likely been processed."
              echo "Closed Aurora issue #$issue"
            done
          else
            echo "No old Aurora update issues found"
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}