name: Maintenance Testing
on:
  schedule:
    # Run weekly maintenance tests on Monday at 2 AM UTC
    - cron: "0 2 * * 1"
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of maintenance test to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - image_functionality
          - security_scan
          - performance_check
          - dependency_audit

jobs:
  image-functionality-test:
    name: Image Functionality Test
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'image_functionality'))
    steps:
      - name: Test latest image availability
        run: |
          echo "Testing image availability and basic functionality..."
          
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/myaurorabluebuild:latest"
          
          # Test image pull
          if docker pull "$IMAGE_NAME"; then
            echo "‚úÖ Image pull successful"
          else
            echo "‚ùå Image pull failed"
            exit 1
          fi
          
          # Test basic system functionality
          echo "Testing basic system functionality..."
          
          # Test maccel package installation
          if docker run --rm "$IMAGE_NAME" rpm -q maccel; then
            echo "‚úÖ Maccel package is installed"
          else
            echo "‚ùå Maccel package not found"
            exit 1
          fi
          
          # Test maccel kernel module package
          if docker run --rm "$IMAGE_NAME" rpm -q kmod-maccel; then
            echo "‚úÖ Maccel kernel module package is installed"
          else
            echo "‚ùå Maccel kernel module package not found"
            exit 1
          fi
          
          # Test maccel group exists
          if docker run --rm "$IMAGE_NAME" getent group maccel; then
            echo "‚úÖ Maccel group exists"
          else
            echo "‚ùå Maccel group not found"
            exit 1
          fi
          
          # Test udev rules exist
          if docker run --rm "$IMAGE_NAME" test -f /etc/udev/rules.d/99-maccel.rules; then
            echo "‚úÖ Maccel udev rules exist"
          else
            echo "‚ùå Maccel udev rules not found"
            exit 1
          fi
          
          # Test custom packages
          echo "Testing custom package installation..."
          
          # Test htop installation (example custom package)
          if docker run --rm "$IMAGE_NAME" rpm -q htop; then
            echo "‚úÖ Custom packages installed correctly"
          else
            echo "‚ö†Ô∏è Some custom packages may not be installed"
          fi
          
          echo "Image functionality test completed successfully"

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'security_scan'))
    steps:
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Scan image for vulnerabilities
        run: |
          echo "Scanning image for security vulnerabilities..."
          
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/myaurorabluebuild:latest"
          
          # Scan for HIGH and CRITICAL vulnerabilities
          echo "Scanning for HIGH and CRITICAL vulnerabilities..."
          trivy image --severity HIGH,CRITICAL --format table "$IMAGE_NAME"
          
          # Generate JSON report for analysis
          trivy image --severity HIGH,CRITICAL --format json --output security-report.json "$IMAGE_NAME"
          
          # Check if there are any CRITICAL vulnerabilities
          CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' security-report.json)
          HIGH_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' security-report.json)
          
          echo "Found $CRITICAL_COUNT CRITICAL vulnerabilities"
          echo "Found $HIGH_COUNT HIGH vulnerabilities"
          
          # Fail if there are CRITICAL vulnerabilities
          if [[ "$CRITICAL_COUNT" -gt 0 ]]; then
            echo "‚ùå CRITICAL vulnerabilities found - immediate attention required"
            exit 1
          elif [[ "$HIGH_COUNT" -gt 5 ]]; then
            echo "‚ö†Ô∏è Many HIGH vulnerabilities found - review recommended"
            exit 1
          else
            echo "‚úÖ Security scan passed - no critical issues found"
          fi

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.json
          retention-days: 30

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'performance_check'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check image size trends
        run: |
          echo "Checking image size and performance metrics..."
          
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/myaurorabluebuild:latest"
          
          # Get image size
          IMAGE_SIZE=$(docker image inspect "$IMAGE_NAME" --format='{{.Size}}' 2>/dev/null || echo "0")
          IMAGE_SIZE_MB=$((IMAGE_SIZE / 1024 / 1024))
          
          echo "Current image size: ${IMAGE_SIZE_MB} MB"
          
          # Store metrics
          mkdir -p .github/metrics
          echo "$(date -u +"%Y-%m-%d %H:%M:%S"),${IMAGE_SIZE_MB}" >> .github/metrics/image-size.csv
          
          # Check if image size is reasonable (under 8GB)
          if [[ "$IMAGE_SIZE_MB" -gt 8192 ]]; then
            echo "‚ö†Ô∏è Image size is quite large (${IMAGE_SIZE_MB} MB) - consider optimization"
          elif [[ "$IMAGE_SIZE_MB" -gt 6144 ]]; then
            echo "‚ÑπÔ∏è Image size is moderate (${IMAGE_SIZE_MB} MB)"
          else
            echo "‚úÖ Image size is reasonable (${IMAGE_SIZE_MB} MB)"
          fi
          
          # Test image startup time
          echo "Testing image startup time..."
          START_TIME=$(date +%s%N)
          docker run --rm "$IMAGE_NAME" echo "Container started" >/dev/null
          END_TIME=$(date +%s%N)
          STARTUP_TIME=$(( (END_TIME - START_TIME) / 1000000 ))  # Convert to milliseconds
          
          echo "Container startup time: ${STARTUP_TIME} ms"
          echo "$(date -u +"%Y-%m-%d %H:%M:%S"),${STARTUP_TIME}" >> .github/metrics/startup-time.csv
          
          if [[ "$STARTUP_TIME" -gt 10000 ]]; then
            echo "‚ö†Ô∏è Slow container startup time (${STARTUP_TIME} ms)"
          else
            echo "‚úÖ Good container startup time (${STARTUP_TIME} ms)"
          fi

      - name: Commit metrics
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add metrics files
          git add .github/metrics/
          
          if git diff --staged --quiet; then
            echo "No new metrics to commit"
          else
            git commit -m "Update performance metrics - $(date -u +"%Y-%m-%d %H:%M UTC")"
            git push
            echo "Performance metrics updated"
          fi

  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'dependency_audit'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Audit Blue Build framework version
        run: |
          echo "Auditing Blue Build framework version..."
          
          # Get current version from workflow
          CURRENT_VERSION=$(grep "blue-build/github-action@" .github/workflows/build.yml | head -1 | sed 's/.*@v\([0-9.]*\).*/\1/')
          echo "Current Blue Build version: v$CURRENT_VERSION"
          
          # Get latest version from GitHub
          LATEST_VERSION=$(gh api repos/blue-build/github-action/releases/latest --jq '.tag_name' | sed 's/^v//')
          echo "Latest Blue Build version: v$LATEST_VERSION"
          
          # Compare versions
          if [[ "$CURRENT_VERSION" == "$LATEST_VERSION" ]]; then
            echo "‚úÖ Blue Build framework is up to date"
          else
            echo "‚ö†Ô∏è Blue Build framework update available: v$CURRENT_VERSION ‚Üí v$LATEST_VERSION"
            
            # Create issue for update
            ISSUE_TITLE="üîÑ Blue Build Framework Update Available - v$LATEST_VERSION"
            ISSUE_BODY="## Blue Build Framework Update

            **Current Version:** v$CURRENT_VERSION
            **Latest Version:** v$LATEST_VERSION
            **Update Available:** Yes

            **Recommended Actions:**
            1. Review [Blue Build release notes](https://github.com/blue-build/github-action/releases/tag/v$LATEST_VERSION)
            2. Test update in a branch first
            3. Update .github/workflows/build.yml with new version
            4. Monitor first build after update

            **Auto-generated by:** Dependency Audit Workflow"

            gh issue create \
              --title "$ISSUE_TITLE" \
              --body "$ISSUE_BODY" \
              --label "dependencies,blue-build,maintenance" \
              --assignee "${{ github.repository_owner }}" || echo "Issue may already exist"
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Audit Aurora base image
        run: |
          echo "Auditing Aurora base image..."
          
          # Get current base image from recipe
          BASE_IMAGE=$(grep "base-image:" recipes/recipe.yml | awk '{print $2}')
          echo "Current base image: $BASE_IMAGE"
          
          # Check if image is accessible
          if skopeo inspect docker://$BASE_IMAGE:latest >/dev/null 2>&1; then
            echo "‚úÖ Aurora base image is accessible"
            
            # Get kernel version
            KERNEL_VERSION=$(skopeo inspect docker://$BASE_IMAGE:latest | jq -r '.Labels["ostree.linux"] // "unknown"')
            echo "Current kernel version: $KERNEL_VERSION"
          else
            echo "‚ùå Aurora base image is not accessible"
            
            # Create issue for base image problem
            ISSUE_TITLE="üö® Aurora Base Image Access Issue"
            ISSUE_BODY="## Aurora Base Image Problem

            **Base Image:** $BASE_IMAGE:latest
            **Issue:** Image is not accessible
            **Detection Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

            **Possible Causes:**
            - Image repository is down
            - Image has been moved or renamed
            - Network connectivity issues
            - Authentication problems

            **Recommended Actions:**
            1. Check Aurora repository status
            2. Verify image name and tag
            3. Test manual image pull
            4. Consider alternative base image if needed

            **Auto-generated by:** Dependency Audit Workflow"

            gh issue create \
              --title "$ISSUE_TITLE" \
              --body "$ISSUE_BODY" \
              --label "aurora,base-image,critical" \
              --assignee "${{ github.repository_owner }}" || echo "Issue may already exist"
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Audit maccel integration
        run: |
          echo "Auditing maccel integration..."
          
          # Check latest maccel version
          LATEST_MACCEL=$(gh api repos/Gnarus-G/maccel/releases/latest --jq '.tag_name' | sed 's/^v//')
          echo "Latest maccel version: v$LATEST_MACCEL"
          
          # Check maccel-rpm-builder status
          if gh api repos/abirkel/maccel-rpm-builder/releases/latest >/dev/null 2>&1; then
            echo "‚úÖ maccel-rpm-builder is accessible"
            
            LATEST_BUILDER=$(gh api repos/abirkel/maccel-rpm-builder/releases/latest --jq '.tag_name')
            echo "Latest maccel-rpm-builder release: $LATEST_BUILDER"
          else
            echo "‚ö†Ô∏è maccel-rpm-builder may not be accessible"
          fi
          
          # Check if current kernel has packages available
          BASE_IMAGE=$(grep "base-image:" recipes/recipe.yml | awk '{print $2}')
          KERNEL_VERSION=$(skopeo inspect docker://$BASE_IMAGE:latest | jq -r '.Labels["ostree.linux"] // "unknown"')
          
          if [[ "$KERNEL_VERSION" != "unknown" ]]; then
            RELEASE_TAG="kernel-${KERNEL_VERSION}-maccel-${LATEST_MACCEL}"
            
            if gh api repos/abirkel/maccel-rpm-builder/releases/tags/$RELEASE_TAG >/dev/null 2>&1; then
              echo "‚úÖ Maccel packages available for current kernel"
            else
              echo "‚ö†Ô∏è Maccel packages may not be available for current kernel ($KERNEL_VERSION)"
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}

  maintenance-report:
    name: Generate Maintenance Report
    runs-on: ubuntu-latest
    needs: [image-functionality-test, security-scan, performance-check, dependency-audit]
    if: always()
    steps:
      - name: Generate maintenance report
        run: |
          echo "=== MyAuroraBluebuild Maintenance Report ==="
          echo "Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo ""
          
          # Check job results
          FUNCTIONALITY_RESULT="${{ needs.image-functionality-test.result }}"
          SECURITY_RESULT="${{ needs.security-scan.result }}"
          PERFORMANCE_RESULT="${{ needs.performance-check.result }}"
          DEPENDENCY_RESULT="${{ needs.dependency-audit.result }}"
          
          echo "## Test Results"
          echo "- Image Functionality: $FUNCTIONALITY_RESULT"
          echo "- Security Scan: $SECURITY_RESULT"
          echo "- Performance Check: $PERFORMANCE_RESULT"
          echo "- Dependency Audit: $DEPENDENCY_RESULT"
          echo ""
          
          # Overall status
          if [[ "$FUNCTIONALITY_RESULT" == "success" && "$SECURITY_RESULT" == "success" && "$PERFORMANCE_RESULT" == "success" && "$DEPENDENCY_RESULT" == "success" ]]; then
            echo "## Overall Status: ‚úÖ HEALTHY"
            echo "All maintenance checks passed successfully."
          elif [[ "$FUNCTIONALITY_RESULT" == "failure" || "$SECURITY_RESULT" == "failure" ]]; then
            echo "## Overall Status: ‚ùå CRITICAL ISSUES"
            echo "Critical issues found that require immediate attention."
          else
            echo "## Overall Status: ‚ö†Ô∏è ATTENTION NEEDED"
            echo "Some issues found that should be addressed."
          fi
          
          echo ""
          echo "## Recommendations"
          
          if [[ "$FUNCTIONALITY_RESULT" == "failure" ]]; then
            echo "- üî¥ Fix image functionality issues immediately"
          fi
          
          if [[ "$SECURITY_RESULT" == "failure" ]]; then
            echo "- üî¥ Address security vulnerabilities immediately"
          fi
          
          if [[ "$PERFORMANCE_RESULT" == "failure" ]]; then
            echo "- üü° Review performance issues and optimize if needed"
          fi
          
          if [[ "$DEPENDENCY_RESULT" == "failure" ]]; then
            echo "- üü° Update dependencies and review compatibility"
          fi
          
          echo ""
          echo "For detailed information, check individual job logs and any created issues."
          echo "=== End of Maintenance Report ==="